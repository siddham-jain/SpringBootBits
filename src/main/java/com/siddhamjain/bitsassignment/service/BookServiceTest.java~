package com.siddhamjain.bitsassignment.test;

import com.siddhamjain.bitsassignment.model.Book;
import com.siddhamjain.bitsassignment.repository.BookRepository;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class BookServiceTest {

    @Mock
    private BookRepository bookRepository;

    @InjectMocks
    private BookService bookService;

    private Book book;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        book = new Book("Harry Potter", "Fantasy", null); // Null for author (you can mock the author if needed)
    }

    @Test
    public void testGetAllBooks() {
        // Arrange
        List<Book> books = Arrays.asList(book);
        when(bookRepository.findAll()).thenReturn(books);

        // Act
        List<Book> result = bookService.getAllBooks();

        // Assert
        assertEquals(1, result.size());
        assertEquals("Harry Potter", result.get(0).getTitle());
        verify(bookRepository, times(1)).findAll();
    }

    @Test
    public void testGetBookById() {
        // Arrange
        when(bookRepository.findById(1L)).thenReturn(Optional.of(book));

        // Act
        Optional<Book> result = bookService.getBookById(1L);

        // Assert
        assertTrue(result.isPresent());
        assertEquals("Harry Potter", result.get().getTitle());
        verify(bookRepository, times(1)).findById(1L);
    }

    @Test
    public void testSaveBook() {
        // Arrange
        when(bookRepository.save(any(Book.class))).thenReturn(book);

        // Act
        Book result = bookService.saveBook(book);

        // Assert
        assertNotNull(result);
        assertEquals("Harry Potter", result.getTitle());
        verify(bookRepository, times(1)).save(book);
    }
}

